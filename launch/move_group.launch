<launch>
  <!-- For Planning Context -->
  <arg name="kinematics_config" default="$(find picknik_ur5_moveit_config)/config/ur5_calibration.yaml" doc="Kinematics config file used for calibration correction. This will be used to verify the robot's calibration is matching the robot_description."/>
  <arg name="robot_description_file" default="$(find picknik_ur5_moveit_config)/launch/planning_context.launch" doc="Robot description launch file."/>
  <arg name="robot_description" default="robot_description"/>
  <arg name="transmission_hw_interface" default="hardware_interface/PositionJointInterface" />
  <arg name="limited" default="true" doc="Use the description in limited mode (Every axis rotates from -PI to PI)"/>
  <arg name="load_robot_description" default="false" />

  <!-- move_group settings -->
  <arg name="pipeline" default="ompl" />
  <arg name="allow_trajectory_execution" default="true"/>
  <arg name="fake_execution" default="false"/>
  <arg name="max_safe_path_cost" default="1"/>
  <arg name="jiggle_fraction" default="0.05" />
  <arg name="publish_monitored_planning_scene" default="true"/>

  <!-- Trajectory execution params -->
  <arg     if="$(arg fake_execution)" name="moveit_controller_manager" default="fake"/>
  <arg unless="$(arg fake_execution)" name="moveit_controller_manager" default="ur5" />
  <arg unless="$(arg fake_execution)" name="hardware_controller" default="ur5_oem" doc="if fake_execution:=false, this should either be 'ur5_oem' or 'ur5_modern'"/>
  <arg unless="$(arg fake_execution)" name="robot_ip" default="10.0.1.148" doc="IP address by which the robot can be reached."/>

  <arg if="$(eval not arg('fake_execution') and arg('hardware_controller') == 'ur5_oem')" name="started_controllers" default="scaled_pos_traj_controller" doc="position trajectory controllers that are loaded and started" />
  <arg if="$(eval not arg('fake_execution') and arg('hardware_controller') == 'ur5_oem')" name="stopped_controllers" default="pos_traj_controller"        doc="position trajectory controllers that are initally loaded, but not started."/>
  <arg if="$(eval not arg('fake_execution') and arg('hardware_controller') == 'ur5_modern')" name="started_controllers" default="pos_based_pos_traj_controller" doc="position trajectory controllers that are loaded and started"/>
  <arg if="$(eval not arg('fake_execution') and arg('hardware_controller') == 'ur5_modern')" name="stopped_controllers" default="vel_based_pos_traj_controller joint_group_vel_controller" doc="position trajectory controllers that are initally loaded, but not started."/>

  <!-- GDB Debug Option -->
  <arg name="debug" default="false" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg     if="$(arg debug)" name="launch_prefix"
          value="gdb -x $(find picknik_ur5_moveit_config)/launch/gdb_settings.gdb --ex run --args" />

  <!-- Verbose Mode Option -->
  <arg name="info" default="$(arg debug)" />
  <arg unless="$(arg info)" name="command_args" value="" />
  <arg     if="$(arg info)" name="command_args" value="--debug" />

  <!-- load URDF, SRDF and joint_limits configuration -->
  <include file="$(find picknik_ur5_moveit_config)/launch/planning_context.launch">
    <arg name="load_robot_description" value="$(arg load_robot_description)" />
    <arg name="limited" value="$(arg limited)" />
    <arg name="kinematics_config" value="$(arg kinematics_config)"/>
    <arg name="robot_description" value="$(arg robot_description)"/>
    <arg name="transmission_hw_interface" value="$(arg transmission_hw_interface)"/>
  </include>

  <!-- Planning Functionality -->
  <include ns="move_group" file="$(find picknik_ur5_moveit_config)/launch/planning_pipeline.launch.xml">
    <arg name="pipeline" value="$(arg pipeline)" />
  </include>

  <!-- Trajectory Execution Functionality -->
  <include ns="move_group" file="$(find picknik_ur5_moveit_config)/launch/trajectory_execution.launch.xml" if="$(arg allow_trajectory_execution)">
    <arg name="fake_execution" value="$(arg fake_execution)"/>
    <arg name="moveit_controller_manager" value="$(arg moveit_controller_manager)" />
    <arg name="moveit_manage_controllers" value="$(arg fake_execution)" />
    <arg unless="$(arg fake_execution)" name="hardware_controller" value="$(arg hardware_controller)" />
    <arg unless="$(arg fake_execution)" name="robot_ip" value="$(arg robot_ip)"/>
    <arg unless="$(arg fake_execution)" name="started_controllers" value="$(arg started_controllers)"/>
    <arg unless="$(arg fake_execution)" name="stopped_controllers" value="$(arg stopped_controllers)"/>
  </include>

  <!-- Sensors Functionality -->
  <include ns="move_group" file="$(find picknik_ur5_moveit_config)/launch/sensor_manager.launch.xml" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_sensor_manager" value="ur5" />
  </include>

  <!-- Start the actual move_group node/action server -->
  <node name="move_group" launch-prefix="$(arg launch_prefix)" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" args="$(arg command_args)">
    <!-- Set the display variable, in case OpenGL code is used internally -->
    <env name="DISPLAY" value="$(optenv DISPLAY :0)" />

    <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
    <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
    <param name="jiggle_fraction" value="$(arg jiggle_fraction)" />

    <!-- MoveGroup capabilities to load -->
    <param name="capabilities" value="move_group/MoveGroupCartesianPathService
				      move_group/MoveGroupExecuteTrajectoryAction
				      move_group/MoveGroupKinematicsService
				      move_group/MoveGroupMoveAction
				      move_group/MoveGroupPickPlaceAction
				      move_group/MoveGroupPlanService
				      move_group/MoveGroupQueryPlannersService
				      move_group/MoveGroupStateValidationService
				      move_group/MoveGroupGetPlanningSceneService
				      move_group/ClearOctomapService
				      " />

    <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
    <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />
  </node>

</launch>
